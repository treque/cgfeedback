Indice: pour bien répondre à ces deux questions, essayez de voir si votre réponse fonctionne dans votre application. (Pour chacune, ce ne sont que quelques lignes à modifier dans le nuanceur!)


Q1: Dans la partie 1, des points de taille fixe sont affichés à l'écran. Leur taille est donnée par la variable gl_PointSize.
    i) Comment faire pour que la taille d'un point varie de façon inverse à sa distance du plan avant du volume de visualisation, c'est-à-dire qu'il soit plus gros lorsqu'il est plus près de la caméra ?

	Dans le vertex shader, nous divisons la taille du pixel par sa distance du plan avant du volume de visualisation. De cette facon, plus le sommet est loin de la camera, plus cette distance est grande, et plus la particule sera petite,
	et le contraire est valide. Pour ce faire, il faut obtenir cette distance, qui est simplement la position du sommet apres toutes les transformations. Dans notre cas, le nuanceur de sommet ne fait pas encore de transformation de projection.
	Il faut donc prendre cela en compte et multiplier la position par toutes ces transformations, comme il a ete fait dans l'enonce a la question ii).
    ii) Donnez l'énoncé GLSL que vous utiliseriez pour implanter ceci.
	gl_PointSize = pointsize  / (matrProj * gl_Position).z; // L:31 on pourrait utiliser la valeur absolue du denominateur, aussi.


Q2: Pour afficher une étincelle qui tourne sur elle-même, on a appliqué une matrice de rotation sur les quatre sommets.
    i) Pourrait-on faire tourner l'étincelle en appliquant la même matrice de rotation sur les coordonnées de texture plutôt que sur les coordonnées des sommets?
	
	Oui, c'est possible.
    ii) Quel problème observerions-nous alors et comment devrait-il être corrigé?
	
	Le probleme que nous observons est que le point de rotation de la texture est a son origine, c.-a.-d. "en bas a gauche". Pour y remedier, il faut translater les coordonnees de textures de (-0.5, -0.5), effectuer la rotation, puis faire une translation
	de (+0.5, +0.5) sur la coordonnee de texture afin de mettre sont axe de rotation au centre de la texture. On aurait ainsi

			AttribsOut.texCoord = AttribsOut.texCoord + vec2(-0.5f, -0.5f);
			AttribsOut.texCoord = rotation * AttribsOut.texCoord;
			AttribsOut.texCoord = AttribsOut.texCoord + vec2(0.5f, 0.5f);

	comme code GLSL qui serait equivalent a faire tourner les sommets pour cette texture et configuration.